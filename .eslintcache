[{"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/index.js":"1","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/App.js":"2","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/routes.js":"3","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/services/auth.js":"4","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signup/index.js":"5","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signup/styles.js":"6","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/styles/global.js":"7","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/services/api.js":"8","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/home/index.js":"9","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/home/styles.js":"10","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/utils/form/index.js":"11","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/utils/app/index.js":"12","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signin/index.js":"13","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signin/styles.js":"14","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/report/index.js":"15","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/report/styles.js":"16","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/reportOrdered/index.js":"17","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/reportOrdered/styles.js":"18","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/accountgroup/index.js":"19","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/accountgroup/styles.js":"20"},{"size":144,"mtime":1608741398978,"results":"21","hashOfConfig":"22"},{"size":134,"mtime":1608676643233,"results":"23","hashOfConfig":"22"},{"size":1317,"mtime":1612034529287,"results":"24","hashOfConfig":"22"},{"size":1545,"mtime":1610655423775,"results":"25","hashOfConfig":"22"},{"size":5144,"mtime":1611103812242,"results":"26","hashOfConfig":"22"},{"size":484,"mtime":1608951545374,"results":"27","hashOfConfig":"22"},{"size":423,"mtime":1608676773191,"results":"28","hashOfConfig":"22"},{"size":668,"mtime":1612100444222,"results":"29","hashOfConfig":"22"},{"size":32881,"mtime":1611232714916,"results":"30","hashOfConfig":"22"},{"size":3097,"mtime":1611007327804,"results":"31","hashOfConfig":"22"},{"size":1111,"mtime":1608952505539,"results":"32","hashOfConfig":"22"},{"size":281,"mtime":1609117662258,"results":"33","hashOfConfig":"22"},{"size":4547,"mtime":1611101639525,"results":"34","hashOfConfig":"22"},{"size":565,"mtime":1611101464852,"results":"35","hashOfConfig":"22"},{"size":6992,"mtime":1611086017475,"results":"36","hashOfConfig":"22"},{"size":372,"mtime":1611030727243,"results":"37","hashOfConfig":"22"},{"size":6898,"mtime":1611085975470,"results":"38","hashOfConfig":"22"},{"size":372,"mtime":1611030727243,"results":"39","hashOfConfig":"22"},{"size":3377,"mtime":1611104397406,"results":"40","hashOfConfig":"22"},{"size":484,"mtime":1608951545373,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18oqry0",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/index.js",[],["85","86"],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/App.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/routes.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/services/auth.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signup/index.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signup/styles.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/styles/global.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/services/api.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/home/index.js",["87"],"import React, {Component} from \"react\";\nimport clsx from \"clsx\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Box from \"@material-ui/core/Box\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport {Badge, Button, List, ListItemText, Snackbar, SwipeableDrawer, TextField, withStyles} from \"@material-ui/core\";\nimport {Alert, Autocomplete} from \"@material-ui/lab\";\nimport {Copyright} from \"../../utils/app\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport * as Icons from \"@material-ui/icons\";\nimport {Adjust, ExitToApp, Send} from \"@material-ui/icons\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport {Styles} from \"./styles\";\nimport Stomp from 'stompjs';\nimport {api, wsClient} from \"../../services/api\";\nimport {getUser, logout, refreshLogin} from \"../../services/auth\";\nimport {green, red} from \"@material-ui/core/colors\";\nimport {number} from \"prop-types\";\n\nclass Home extends Component {\n    state = {\n        message: \"\",\n        messageAll: \"\",\n        menuLeftOpen: false,\n        menuRightOpen: false,\n        alertOpen: false,\n        alert: \"\",\n        environments: [],\n        currentEnvironment: {\n            id: getUser().environment,\n            questions: [{\n                id: 0,\n                description: \"\",\n                responses: []\n            }],\n            tools: []\n        },\n        chatMessages: [],\n        chatMessagesAll: [],\n        newMessages: 0,\n        accounts1: [],\n        accounts2: [],\n        car1: {\n            fromEnvironment: {\n                id: 1,\n                name: \"\"\n            },\n            toEnvironment: {\n                id: 1,\n                name: \"\"\n            }\n        },\n        car2: {\n            fromEnvironment: {\n                id: 1,\n                name: \"\"\n            },\n            toEnvironment: {\n                id: 1,\n                name: \"\"\n            }\n        },\n        tool1: \"\",\n        tool2: \"\",\n        isLeader: getUser().isLeader\n    };\n\n    constructor(props) {\n        super(props);\n        this.chatInput = React.createRef();\n        this.chatInputAll = React.createRef();\n    }\n\n    async componentDidMount() {\n        await refreshLogin();\n        this.handleMenu();\n        this.handleCurrentEnvironment();\n        this.handleMessages();\n        this.handleAccounts();\n\n        const stompClient = Stomp.over(wsClient());\n        const user = getUser();\n        stompClient.connect({}, () => {\n            stompClient.subscribe(`/topic/messages/${user.group}`,\n                (response) => {\n                    const {currentEnvironment, newMessages, menuRightOpen} = this.state;\n                    const nextState = this.state;\n                    const message = JSON.parse(response.body);\n                    const user = getUser();\n\n                    let numberOfNewMessages = newMessages;\n                    if (menuRightOpen) {\n                        numberOfNewMessages = 0;\n                    } else if (message.account.id !== user.id) {\n                        numberOfNewMessages++;\n                    }\n\n                    if (!message.environment) {\n                        nextState[\"chatMessagesAll\"] = nextState[\"chatMessagesAll\"].concat(message);\n                    } else if (message.environment.id === currentEnvironment.id) {\n                        nextState[\"chatMessages\"] = nextState[\"chatMessages\"].concat(message);\n                    } else {\n                        numberOfNewMessages = newMessages;\n                    }\n                    nextState[\"newMessages\"] = numberOfNewMessages;\n                    this.setState(nextState);\n                });\n\n            stompClient.subscribe(`/topic/transport/${user.group}`,\n                response => {\n                    const transport = JSON.parse(response.body);\n                    const user = getUser();\n                    if (transport.accounts.filter(a => a.id === user.id).length === 1) {\n                        refreshLogin().then(() => {\n                            const nextState = this.state[\"currentEnvironment\"];\n                            nextState[\"id\"] = getUser().environment;\n                            this.setState(nextState);\n                            this.handleCurrentEnvironment();\n                            this.handleMessages();\n                        });\n                    } else {\n                        this.handleTools();\n                    }\n\n                    const {isLeader} = this.state;\n                    if (isLeader) this.handleAccounts();\n                });\n        }, () => {\n            console.log(\"error\");\n        });\n    }\n\n    logout = () => {\n        logout();\n        this.props.history.push(\"/\");\n    };\n\n    handleMenu = () => {\n        api.get(\"/api/environments\")\n            .then(response =>\n                this.setState({environments: response.data})\n            );\n    };\n\n    handleAccounts = () => {\n        api.get(`/api/accountGroups/${getUser().group}`)\n            .then(response => {\n                    response.data.accounts.forEach(value => value[\"color\"] = red[500]);\n                    this.setState({\n                        accounts: response.data.accounts\n                    });\n\n                    this.handleCars(1);\n                    this.handleCars(2);\n                }\n            );\n    };\n\n    handleCars = (carIndex) => {\n        api.get(`/api/transports/getByIndex/${carIndex}/${getUser().group}`)\n            .then(response => {\n                    const {accounts} = this.state;\n                    const list = JSON.parse(JSON.stringify(accounts));\n                    const nextState = {};\n                    response.data.fromEnvironment = response.data.toEnvironment;\n                    response.data.toEnvironment = undefined;\n                    nextState[\"car\" + carIndex] = response.data;\n                    nextState[\"accounts\" + carIndex] = list\n                        .filter(a => a.environment.id === response.data.fromEnvironment.id);\n                    let tools = \"\";\n                    response.data.fromEnvironment.tools.forEach(t => tools += t.description + \"; \");\n                    nextState[\"tool\" + carIndex] = tools.trim();\n                    this.setState(nextState);\n                }\n            );\n    };\n\n    handleCurrentEnvironment = () => {\n        api.get(`/api/environments/getWithUserResponses`)\n            .then(response =>\n                this.setState({currentEnvironment: response.data})\n            );\n    };\n\n    handleTools = () => {\n        api.get(`/api/environments/getWithUserResponses`)\n            .then(response => {\n                const {currentEnvironment} = this.state;\n                currentEnvironment[\"tools\"] = response.data.tools;\n                this.setState(currentEnvironment);\n            });\n    };\n\n    handleMessages = () => {\n        api.get(`/api/chatMessages/getByEnvironmentId/${this.state.currentEnvironment.id}`)\n            .then(response =>\n                this.setState({chatMessages: response.data})\n            );\n\n        api.get(`/api/chatMessages/getByAccountGroup`)\n            .then(response =>\n                this.setState({chatMessagesAll: response.data})\n            );\n    };\n\n    handleOpenLeftMenu = () => {\n        this.setState({menuLeftOpen: true});\n    }\n\n    handleCloseLeftMenu = () => {\n        this.setState({menuLeftOpen: false});\n    }\n\n    handleOpenRightMenu = () => {\n        this.setState({\n            menuRightOpen: true,\n            newMessages: 0\n        });\n    }\n\n    handleCloseRightMenu = () => {\n        this.setState({menuRightOpen: false});\n    }\n\n    changeMessage = (e) => {\n        const nextState = {}\n        nextState[e.target.id] = e.target.value;\n        this.setState(nextState);\n    }\n\n    handleSendMessage = (isAll) => {\n        const {message, messageAll} = this.state;\n        const endpoint = isAll ? \"/all\" : \"\";\n        const msg = isAll ? messageAll : message;\n        if (msg !== \"\") {\n            api.post(\"/api/chatMessages\" + endpoint, {\n                \"text\": msg\n            }).then(() => {\n                if (isAll) {\n                    this.setState({\"messageAll\": \"\"});\n                    this.chatInputAll.current.focus();\n                } else {\n                    this.setState({\"message\": \"\"});\n                    this.chatInput.current.focus();\n                }\n            }).catch(err => console.log(err));\n        }\n    }\n\n    changeResponse = (e) => {\n        const value = e.target.value;\n        const name = e.target.id;\n        const index = name.substring(9);\n        const nextState = this.state[\"currentEnvironment\"];\n\n        if (!!nextState[\"questions\"][parseInt(index)][\"responses\"]) {\n            nextState[\"questions\"][parseInt(index)][\"responses\"] = [{\"text\": value}];\n        } else {\n            nextState[\"questions\"][parseInt(index)][\"responses\"][0][\"text\"] = value;\n        }\n\n        this.setState(nextState);\n    }\n\n    changeValue = (e) => {\n        const nextState = {};\n        nextState[e.target.id] = e.target.value;\n        this.setState(nextState);\n    }\n\n    selectAccount = (accountIndex, carNumber) => {\n        const nextState = this.state[\"accounts\" + carNumber];\n        if (nextState[accountIndex][\"color\"] === green[500]) {\n            nextState[accountIndex][\"color\"] = red[500];\n        } else {\n            nextState[accountIndex][\"color\"] = green[500];\n        }\n        this.setState(nextState);\n    }\n\n    handleCarGo = async (carNumber) => {\n        const car = this.state[\"car\" + carNumber];\n        const accounts = this.state[\"accounts\" + carNumber]\n            .filter(a => a.color === green[500])\n            .map(a => {\n                return {id: a.id}\n            });\n        const tools = this.state[\"tool\" + carNumber]\n            .split(\";\")\n            .filter(t => !!t)\n            .map(t => {\n                return {\n                    description: t,\n                    environment: !!car[\"toEnvironment\"] ? car[\"toEnvironment\"] : 0\n                }\n            });\n\n        if (accounts.length !== 0 && !!car[\"toEnvironment\"]) {\n            try {\n                await api.post(\"/api/transports\", {\n                    accountGroup: {id: getUser().group},\n                    carIndex: carNumber,\n                    accounts: accounts,\n                    tools: tools,\n                    toEnvironment: car[\"toEnvironment\"],\n                    fromEnvironment: car[\"fromEnvironment\"],\n                    timestamp: 1202020\n                });\n\n                const nextState = {};\n                nextState[\"tool\" + carNumber] = \"\";\n                nextState[\"alertOpen\"] = true;\n                nextState[\"alert\"] = `Carro ${carNumber} enviado!`;\n\n                this.setState(nextState);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    };\n\n    onChangeEnvironmentTo = (carNumber, value) => {\n        const nextState = this.state[\"car\" + carNumber];\n        nextState[\"toEnvironment\"] = value;\n        this.setState(nextState);\n    }\n\n    handleSendResponses = async () => {\n        const {currentEnvironment} = this.state;\n        const questions = currentEnvironment.questions;\n\n        const alertMessage = questions.length > 1 ? \"As respostas foram salvas!\" : \"A resposta foi salva!\";\n\n        let savedResponses = 0;\n        await questions.forEach(question => {\n            if (!!question.responses && question.responses.length > 0) {\n                const response = question.responses[0].text.trim();\n\n                if (response.length > 0) {\n                    api.post(\"/api/responses\", {\n                        account: {id: getUser().id},\n                        text: response,\n                        question: {id: question.id}\n                    })\n                        .then(() => {\n                            if (questions.length === ++savedResponses) {\n                                this.setState({\n                                    alertOpen: true,\n                                    alert: alertMessage\n                                });\n                            }\n                        })\n                        .catch(reason => {\n                            console.log(reason);\n                            alert(\"UM ERRO OCORREU! SALVE SUAS RESPOSTAS!\");\n                        });\n                }\n            }\n        });\n    }\n\n    handleCloseAlert = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        this.setState({alertOpen: false});\n    };\n\n    render() {\n        const {classes} = this.props;\n        const {\n            menuLeftOpen, menuRightOpen, environments, currentEnvironment,\n            message, chatMessages, newMessages, accounts1, accounts2, alertOpen,\n            car1, car2, tool1, tool2, isLeader, chatMessagesAll, messageAll, alert\n        } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <CssBaseline/>\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, menuLeftOpen && classes.appBarShift)}>\n                    <Toolbar className={classes.toolbar}>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={this.handleOpenLeftMenu}\n                            className={clsx(classes.menuButtonLeft, menuLeftOpen && classes.menuButtonHidden)}\n                        >\n                            <MenuIcon/>\n                        </IconButton>\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                            {currentEnvironment.name}\n                        </Typography>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            onClick={this.handleOpenRightMenu}\n                            className={clsx(classes.menuButtonRight, menuRightOpen && classes.menuButtonHidden)}\n                        >\n                            <Badge badgeContent={newMessages} color=\"secondary\">\n                                <NotificationsIcon/>\n                            </Badge>\n                        </IconButton>\n\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            onClick={this.logout}>\n                            <Badge color=\"secondary\">\n                                <ExitToApp/>\n                            </Badge>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    variant=\"permanent\"\n                    classes={{\n                        paper: clsx(classes.drawerPaper, !menuLeftOpen && classes.drawerPaperClose),\n                    }}\n                    open={menuLeftOpen}\n                >\n                    <div className={classes.toolbarIcon}>\n                        <IconButton onClick={this.handleCloseLeftMenu}>\n                            <ChevronLeftIcon/>\n                        </IconButton>\n                    </div>\n                    <Divider/>\n                    <List>\n                        <div>\n                            {environments.map((value, index) => {\n                                return <ListItem button key={`menu-${value.id}`}>\n                                    <ListItemIcon>\n                                        {React.createElement(Icons[value.icon])}\n                                    </ListItemIcon>\n                                    <ListItemText primary={value.name}/>\n                                </ListItem>\n                            })}\n                        </div>\n                    </List>\n                </Drawer>\n                <SwipeableDrawer\n                    anchor=\"right\"\n                    onClose={this.handleCloseRightMenu}\n                    onOpen={this.handleOpenRightMenu}\n                    open={menuRightOpen}\n                >\n                    <div className={classes.toolbarIconRight}>\n                        <IconButton onClick={this.handleCloseRightMenu}>\n                            <ChevronRightIcon/>\n                        </IconButton>\n                    </div>\n                    <Divider/>\n                    <List>\n                        <div className={classes.rightMenu}>\n                            <h3>Chat com que está no(a) {currentEnvironment.name} (mesmo lugar que você):</h3>\n                            <div className={classes.chatMessages}>\n                                {chatMessages.map((value, index) => {\n                                    return <div key={`chatMessages-${value.id}`}>\n                                        <span className={classes.chatMessageAccount}>\n                                            {value.account.name}: &nbsp;\n                                        </span>\n                                        <span dangerouslySetInnerHTML={{__html: value.text}}/>\n                                    </div>\n                                })}\n                            </div>\n                            <form className={classes.chatForm} noValidate>\n                                <TextField\n                                    inputRef={this.chatInput}\n                                    className={classes.chatInput}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    multiline\n                                    inputProps={{maxLength: 2048}}\n                                    rowsMax={4}\n                                    fullWidth\n                                    name=\"message\"\n                                    type=\"text\"\n                                    id=\"message\"\n                                    value={message}\n                                    onChange={this.changeMessage}\n                                />\n                                <IconButton color=\"primary\" aria-label=\"Enviar\"\n                                            onClick={() => this.handleSendMessage(false)}>\n                                    <Send/>\n                                </IconButton>\n                            </form>\n\n                            <h3>Chat com todos:</h3>\n                            <div className={classes.chatMessages}>\n                                {chatMessagesAll.map((value, index) => {\n                                    return <div key={`chatMessages-${value.id}`}>\n                                        <span className={classes.chatMessageAccount}>\n                                            {value.account.name}: &nbsp;\n                                        </span>\n                                        <span dangerouslySetInnerHTML={{__html: value.text}}/>\n                                    </div>\n                                })}\n                            </div>\n                            <form className={classes.chatForm} noValidate>\n                                <TextField\n                                    inputRef={this.chatInputAll}\n                                    className={classes.chatInput}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    multiline\n                                    inputProps={{maxLength: 2048}}\n                                    rowsMax={4}\n                                    fullWidth\n                                    name=\"messageAll\"\n                                    type=\"text\"\n                                    id=\"messageAll\"\n                                    value={messageAll}\n                                    onChange={this.changeMessage}\n                                />\n                                <IconButton color=\"primary\" aria-label=\"Enviar\"\n                                            onClick={() => this.handleSendMessage(true)}>\n                                    <Send/>\n                                </IconButton>\n                            </form>\n                        </div>\n                        <Divider/>\n                    </List>\n                </SwipeableDrawer>\n                <main className={classes.content}>\n                    <div className={classes.appBarSpacer}/>\n                    <Container maxWidth=\"lg\" className={classes.container}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <Paper className={classes.paper}>\n                                    <h1>Você está no(a) {currentEnvironment.name}</h1>\n                                    <div dangerouslySetInnerHTML={{__html: currentEnvironment.description}}/>\n\n                                    <Divider/>\n                                    <form className={classes.form} noValidate>\n                                        {currentEnvironment.questions.map((value, index) => {\n                                            return <div key={`div-question-${value.id}`}>\n                                                <p dangerouslySetInnerHTML={{__html: value.description}}\n                                                   key={`question-${value.id}`}/>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    fullWidth\n                                                    name={`response-${index}`}\n                                                    label=\"Resposta\"\n                                                    multiline\n                                                    type=\"text\"\n                                                    inputProps={{maxLength: 1024}}\n                                                    rowsMax={4}\n                                                    key={`response-${index}`}\n                                                    id={`response-${index}`}\n                                                    value={value.responses.length === 0 ? \"\" : value.responses[0].text}\n                                                    onChange={this.changeResponse}\n                                                />\n                                            </div>;\n                                        })}\n\n                                        {currentEnvironment.questions.length > 0 && <Button\n                                            type=\"button\"\n                                            fullWidth\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            className={classes.submit}\n                                            onClick={this.handleSendResponses}\n                                        >\n                                            Enviar\n                                        </Button>}\n                                    </form>\n\n                                    <Snackbar open={alertOpen} autoHideDuration={6000} onClose={this.handleCloseAlert}>\n                                        <Alert onClose={this.handleCloseAlert} severity=\"success\">\n                                            {alert}\n                                        </Alert>\n                                    </Snackbar>\n\n                                    <Divider/>\n                                    <div className={classes.toolsDiv}>\n                                        {currentEnvironment.tools.map((value, index) => {\n                                            return <Box component=\"div\" display=\"inline-block\" p={1} m={1}\n                                                        className={classes.tools}\n                                                        key={`tool-description-${value.id}`}>\n                                                {value.description}\n                                            </Box>;\n                                        })}\n                                    </div>\n                                </Paper>\n\n                                {isLeader && <Grid justify=\"space-between\" container spacing={2}>\n                                    <Grid item xs={6} className={classes.carGrid}>\n                                        <Paper className={classes.paper}>\n                                            <h3>Carro 1 está no(a) {car1.fromEnvironment.name}</h3>\n                                            <Divider/>\n\n                                            {accounts1.map((value, index) => {\n                                                return <ListItem button key={`account1-${value.id}`}\n                                                                 onClick={() => this.selectAccount(index, 1)}>\n                                                    <ListItemIcon>\n                                                        <Adjust style={{color: value.color}}/>\n                                                    </ListItemIcon>\n                                                    <ListItemText primary={value.name}/>\n                                                </ListItem>\n                                            })}\n                                            <Divider/>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                fullWidth\n                                                name=\"tool1\"\n                                                label=\"Ferramentas\"\n                                                multiline\n                                                type=\"text\"\n                                                rowsMax={8}\n                                                key=\"tool1\"\n                                                id=\"tool1\"\n                                                value={tool1}\n                                                onChange={this.changeValue}\n                                            />\n                                            <Autocomplete\n                                                options={environments.filter(e => e.id !== car1.fromEnvironment.id)}\n                                                fullWidth\n                                                renderOption={(option) => (\n                                                    <React.Fragment>\n                                                        {React.createElement(Icons[option.icon])}\n                                                        {option.name}\n                                                    </React.Fragment>\n                                                )}\n                                                value={car1.toEnvironment}\n                                                onChange={(event, value) => this.onChangeEnvironmentTo(1, value)}\n                                                getOptionLabel={(option) => option.name}\n                                                renderInput={(params) =>\n                                                    <TextField {...params} label=\"Indo para\" variant=\"outlined\"\n                                                               inputProps={{...params.inputProps}}/>}\n                                            />\n\n                                            <IconButton color=\"primary\" aria-label=\"Ir\" className={classes.carButton}\n                                                        onClick={() => this.handleCarGo(1)}>\n                                                <Send/>\n                                            </IconButton>\n                                        </Paper>\n                                    </Grid>\n                                    <Grid item xs={6} className={classes.carGrid}>\n                                        <Paper className={classes.paper}>\n                                            <h3>Carro 2 está no(a) {car2.fromEnvironment.name}</h3>\n                                            <Divider/>\n\n                                            {accounts2.map((value, index) => {\n                                                return <ListItem button key={`account2-${value.id}`}\n                                                                 onClick={() => this.selectAccount(index, 2)}>\n                                                    <ListItemIcon>\n                                                        <Adjust style={{color: value.color}}/>\n                                                    </ListItemIcon>\n                                                    <ListItemText primary={value.name}/>\n                                                </ListItem>\n                                            })}\n                                            <Divider/>\n                                            <TextField\n                                                variant=\"outlined\"\n                                                margin=\"normal\"\n                                                fullWidth\n                                                name=\"tool2\"\n                                                label=\"Ferramentas\"\n                                                multiline\n                                                type=\"text\"\n                                                rowsMax={8}\n                                                key=\"tool2\"\n                                                id=\"tool2\"\n                                                value={tool2}\n                                                onChange={this.changeValue}\n                                            />\n\n                                            <Autocomplete\n                                                options={environments.filter(e => e.id !== car2.fromEnvironment.id)}\n                                                fullWidth\n                                                renderOption={(option) => (\n                                                    <React.Fragment>\n                                                        {React.createElement(Icons[option.icon])}\n                                                        {option.name}\n                                                    </React.Fragment>\n                                                )}\n                                                value={car2.toEnvironment}\n                                                onChange={(event, value) => this.onChangeEnvironmentTo(2, value)}\n                                                getOptionLabel={(option) => option.name}\n                                                renderInput={(params) =>\n                                                    <TextField {...params} label=\"Indo para\" variant=\"outlined\"\n                                                               inputProps={{...params.inputProps}}/>}\n                                            />\n\n                                            <IconButton color=\"primary\" aria-label=\"Ir\" className={classes.carButton}\n                                                        onClick={() => this.handleCarGo(2)}>\n                                                <Send/>\n                                            </IconButton>\n                                        </Paper>\n                                    </Grid>\n                                </Grid>}\n                            </Grid>\n                        </Grid>\n                        <Box pt={4}>\n                            <Copyright/>\n                        </Box>\n                    </Container>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(Styles)(Home)\n","/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/home/styles.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/utils/form/index.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/utils/app/index.js",[],["88","89"],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signin/index.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/signin/styles.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/report/index.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/report/styles.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/reportOrdered/index.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/reportOrdered/styles.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/accountgroup/index.js",[],"/Users/rodolfo.cugler/Documents/projects/radioactive-game-web/src/pages/accountgroup/styles.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":30,"column":9,"nodeType":"96","messageId":"97","endLine":30,"endColumn":15},{"ruleId":"90","replacedBy":"98"},{"ruleId":"92","replacedBy":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'number' is defined but never used.","Identifier","unusedVar",["100"],["101"],"no-global-assign","no-unsafe-negation"]